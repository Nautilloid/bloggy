<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Rich told me to blog</title>
    <link>//localhost:1313/tags/security/</link>
    <description>Recent content in Security on Rich told me to blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>take what you need © {year}</copyright>
    <lastBuildDate>Fri, 09 May 2025 16:06:04 +0100</lastBuildDate>
    <atom:link href="//localhost:1313/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IPv4 Representation</title>
      <link>//localhost:1313/lab/ipv4-representation/</link>
      <pubDate>Fri, 09 May 2025 16:06:04 +0100</pubDate>
      <guid>//localhost:1313/lab/ipv4-representation/</guid>
      <description>&lt;p&gt;First, some background&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc791&#34;&gt;https://www.rfc-editor.org/rfc/rfc791&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Steve Gibson GRC explains the Internet&#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=7ALMh6I1fAo&#34;&gt;https://www.youtube.com/watch?v=7ALMh6I1fAo&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The model of operation is that an internet module resides in each host&#xA;engaged in internet communication and in each gateway that&#xA;interconnects networks.  These modules share common rules for&#xA;interpreting address fields and for fragmenting and assembling&#xA;internet datagrams.  In addition, these modules (especially in&#xA;gateways) have procedures for making routing decisions and other&#xA;functions. -rfc791-&lt;/p&gt;&#xA;&lt;p&gt;The datagram arrives at a gateway host wrapped in the local network&#xA;header, the local network interface strips off this header, and turns the datagram over to the internet module.  The internet module determines from the internet address that the datagram is to be forwarded to another host in a second network.  The internet module determines a local net address for the destination host.  It calls on the local network interface for that network to send the datagram. -rfc791-&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up bloggy</title>
      <link>//localhost:1313/lab/setting-up-de-blog/</link>
      <pubDate>Fri, 02 May 2025 16:06:04 +0100</pubDate>
      <guid>//localhost:1313/lab/setting-up-de-blog/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Technologies&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Ubuntu Server &amp;gt; Nginx &amp;gt; Git &amp;gt; Hugo &amp;gt; Obsidian &amp;gt; Unifi &amp;gt; No-IP &amp;gt; GoDaddy&lt;/p&gt;&#xA;&lt;p&gt;Note: Before starting this please consider that if you&amp;rsquo;d like to have screenshots in your blog you need to have a path from your .md file to the location of the .png. To simplify this when I create a markdown file for a blog post, I first create a folder that will hold all of the content. I wish I&amp;rsquo;d know to do this from the start.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript</title>
      <link>//localhost:1313/dvwa/javascript/</link>
      <pubDate>Mon, 17 Feb 2025 16:06:04 +0100</pubDate>
      <guid>//localhost:1313/dvwa/javascript/</guid>
      <description>&lt;p&gt;JavaScript is the world&amp;rsquo;s most popular programming langauge. Its prevalence, along with its client-side execution, creates opportunities for various attack vectors. JavaScript to identify and exploit vulnerabilities in web applications, such as Cross-Site Scripting (XSS), Cross-Site Request Forgery (CSRF), and some mention of other common security flaws.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.stationx.net/javascript-for-hacking/&#34;&gt;https://www.stationx.net/javascript-for-hacking/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Low:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;To make the token visible remove the &amp;ldquo;hidden&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;This explains for to complete the task . Need to submit the word success and the correct token.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Content Security Policy</title>
      <link>//localhost:1313/dvwa/content-security-policy-bypass/</link>
      <pubDate>Thu, 13 Feb 2025 16:06:04 +0100</pubDate>
      <guid>//localhost:1313/dvwa/content-security-policy-bypass/</guid>
      <description>&lt;p&gt;CSP is a browser security mechanism that aims to mitigate XSS and some other attacks. It works by restricting the resources (such as scripts and images) that a page can load and restricting whether a page can be framed by other pages.&lt;/p&gt;&#xA;&lt;p&gt;To enable CSP, a response needs to include an HTTP response header called Content-Security-Policy with a value containing the policy. The policy itself consists of one or more directives, separated by semicolons.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GOAD Setup</title>
      <link>//localhost:1313/lab/goad/</link>
      <pubDate>Thu, 13 Feb 2025 16:06:04 +0100</pubDate>
      <guid>//localhost:1313/lab/goad/</guid>
      <description>&lt;p&gt;GOAD is a simulated Active Directory LAB environment used to execute Windows attacks&#xA;The purpose of this lab is to give pentesters a vulnerable Active directory environment ready to use to practice usual attack techniques. There are 5 windows servers in total, 3 domain controllers, two MySQL servers. Users and accounts have been populated and the name mimic charachters from a popular TV series.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Using this guide setup your GOAD LAB on your server.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reflected XSS</title>
      <link>//localhost:1313/dvwa/xss-reflected/</link>
      <pubDate>Tue, 24 Dec 2024 16:06:04 +0100</pubDate>
      <guid>//localhost:1313/dvwa/xss-reflected/</guid>
      <description>&lt;p&gt;Reflected XSS is an injection attack where malicious scripts are sent to a vulnerable web server (often via URLs), and the server immediately includes (reflects) those scripts unsanitized in the HTML response back to the victim&amp;rsquo;s browser, which then executes them. It relies on the server reflecting user input directly into the response page.&lt;/p&gt;&#xA;&lt;p&gt;Examples:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;javascript:/*--&amp;gt;&amp;lt;/title&amp;gt;&amp;lt;/style&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/xmp&amp;gt;&#xA;&amp;lt;svg/onload=&amp;#39;+/&amp;#34;`/+/onmouseover=1/+/[*/[]/+alert(42);//&amp;#39;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;IMG &amp;#34;&amp;#34;&amp;#34;&amp;gt;&amp;lt;SCRIPT&amp;gt;alert(&amp;#34;XSS&amp;#34;)&amp;lt;/SCRIPT&amp;gt;&amp;#34;\&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;a href=&amp;#34;javascript:alert(String.fromCharCode(88,83,83))&amp;#34;&amp;gt;Click Me!&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;IMG SRC=# onmouseover=&amp;#34;alert(&amp;#39;xxs&amp;#39;)&amp;#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;IMG SRC=/ onerror=&amp;#34;alert(String.fromCharCode(88,83,83))&amp;#34;&amp;gt;&amp;lt;/img&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DVWA has 3 settings to show different levels of security. Below are the bypasses for each level.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
